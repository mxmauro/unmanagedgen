package generator

import (
	"bytes"
	"errors"
	"fmt"
	"go/format"
	"go/scanner"
	"os"
	"strings"
	"text/template"
)

// -----------------------------------------------------------------------------

type SaveContext struct {
	gen          *Generator
	allocatorPkg string
	lines        []string
}

// -----------------------------------------------------------------------------

func newSaveContext(gen *Generator) *SaveContext {
	sc := SaveContext{
		gen:   gen,
		lines: make([]string, 0),
	}
	return &sc
}

func (sc *SaveContext) WriteLine(format string, a ...any) {
	sc.lines = append(sc.lines, fmt.Sprintf(format, a...))
}

func (sc *SaveContext) WriteTemplate(name string, code string, funcMap template.FuncMap, data any) error {
	var buf bytes.Buffer

	tmpl := template.New(name)
	if funcMap != nil {
		tmpl = tmpl.Funcs(funcMap)
	}
	_, err := tmpl.Parse(code)
	if err != nil {
		return err
	}
	err = tmpl.Execute(&buf, data)
	if err != nil {
		return err
	}
	lines := strings.Split(buf.String(), "\n")
	sc.lines = append(sc.lines, lines...)
	return nil
}

func (sc *SaveContext) Save() error {
	f, err := os.Create(sc.gen.filename)
	if err != nil {
		return err
	}
	defer func() {
		_ = f.Close()
	}()

	_, err = f.WriteString("// Code generated by unmanagedgen - DO NOT EDIT.\n\n")
	if err != nil {
		return err
	}

	var code []byte
	code, err = format.Source([]byte(strings.Join(sc.lines, "\n")))
	if err != nil {
		var scErr scanner.ErrorList
		if errors.As(err, &scErr) && scErr.Len() > 0 {
			if scErr[0].Pos.IsValid() {
				startLine := scErr[0].Pos.Line
				if startLine > 2 {
					startLine -= 2
				} else {
					startLine = 0
				}
				endLine := scErr[0].Pos.Line + 1
				if endLine < len(sc.lines)-2 {
					endLine += 2
				} else {
					endLine = len(sc.lines)
				}
				return errors.New(err.Error() + "\n" + strings.Join(sc.lines[startLine:endLine], "\n"))
			}
		}
		return err
	}

	_, err = f.Write(code)
	if err != nil {
		return err
	}

	// Done
	return nil
}

// -----------------------------------------------------------------------------

func templateCounter() func() int {
	count := 0
	return func() int {
		count++
		return count
	}
}
